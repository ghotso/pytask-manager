name: Build and Push Docker Image

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to build from'
        required: true
        default: 'dev'
        type: choice
        options:
          - main
          - dev
  push:
    branches:
      - main
      - dev
    tags:
      - 'v*'
    paths:
      - 'backend/**'
      - 'frontend/**'
      - 'migrations/**'
      - 'requirements.txt'
      - 'Dockerfile'
      - 'docker-compose.yml'
      - 'run.py'
      - '.dockerignore'
  pull_request:
    branches:
      - main
      - dev
    paths:
      - 'backend/**'
      - 'frontend/**'
      - 'migrations/**'
      - 'requirements.txt'
      - 'Dockerfile'
      - 'docker-compose.yml'
      - 'run.py'
      - '.dockerignore'

env:
  REGISTRY: ghcr.io
  DEV_IMAGE_NAME: pytask-dev
  PROD_IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch || github.ref }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Set image name based on branch
        id: image_name
        run: |
          if [[ ${{ github.event.inputs.branch || github.ref }} == "dev" ]] || [[ ${{ github.event.inputs.branch || github.ref }} == "refs/heads/dev" ]]; then
            echo "IMAGE_NAME=${{ env.DEV_IMAGE_NAME }}" >> $GITHUB_ENV
          else
            echo "IMAGE_NAME=${{ env.PROD_IMAGE_NAME }}" >> $GITHUB_ENV
          fi

      - name: Build and push Docker image
        id: docker_build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Send Discord Notification
        if: success() && github.event_name != 'pull_request'
        uses: Ilshidur/action-discord@master
        env:
          DISCORD_WEBHOOK: ${{ secrets.DC_WEBHOOK }}
          DISCORD_USERNAME: "PyTask-Manager Build Bot"
          DISCORD_AVATAR: ${{ secrets.DC_ICON }}
        with:
          args: |
            ðŸš€ **New Build Deployed Successfully!**
            
            Repository: `${{ github.repository }}`
            Branch: `${{ github.event.inputs.branch || github.ref_name }}`
            Commit: [`${{ github.sha }}`](${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }})
            
            Image: `${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:latest` 